{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3e1f351-fbaa-4e32-826c-dbb7a95af12a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pickle\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, classification_report, confusion_matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv(\"credit_risk_data7555.csv\")\n",
    "\n",
    "# Data Preprocessing\n",
    "df['LoanIncomeRatio'] = df['LoanAmount'] / df['Income']\n",
    "\n",
    "# Outlier Removal using IQR\n",
    "Q1 = df['LoanIncomeRatio'].quantile(0.25)\n",
    "Q3 = df['LoanIncomeRatio'].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "lower_bound = Q1 - 1.5 * IQR\n",
    "upper_bound = Q3 + 1.5 * IQR\n",
    "df['LoanIncomeRatio'] = df['LoanIncomeRatio'].clip(lower=lower_bound, upper=upper_bound)\n",
    "\n",
    "# Credit Score Categorization\n",
    "bins = [0, 600, 700, 800, 850]\n",
    "labels = ['Poor', 'Average', 'Good', 'Excellent']\n",
    "df['CreditScoreCategory'] = pd.cut(df['CreditScore'], bins=bins, labels=labels, right=False)\n",
    "\n",
    "# Impute missing values\n",
    "numeric_features = df.select_dtypes(include=np.number).columns\n",
    "categorical_features = df.select_dtypes(include=['object', 'category']).columns\n",
    "\n",
    "num_imputer = SimpleImputer(strategy='median')\n",
    "df[numeric_features] = num_imputer.fit_transform(df[numeric_features])\n",
    "\n",
    "cat_imputer = SimpleImputer(strategy='most_frequent')\n",
    "df[categorical_features] = cat_imputer.fit_transform(df[categorical_features])\n",
    "\n",
    "# Standardizing categorical columns\n",
    "df['Gender'] = df['Gender'].replace({'Unknown': 'Other'})\n",
    "df['MaritalStatus'] = df['MaritalStatus'].replace({'Unknown': 'Other'})\n",
    "\n",
    "# One-Hot Encoding\n",
    "categorical_features = ['MaritalStatus', 'Education', 'EmploymentStatus', 'Gender', 'CreditScoreCategory']\n",
    "df = pd.get_dummies(df, columns=categorical_features, drop_first=True)\n",
    "\n",
    "# Define X (features) and y (target)\n",
    "X = df.drop(columns=['Defaulted'])\n",
    "y = df['Defaulted']\n",
    "\n",
    "# Split data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n",
    "\n",
    "# Gradient Boosting Model\n",
    "gb = GradientBoostingClassifier()\n",
    "\n",
    "# Fit model\n",
    "gb.fit(X_train, y_train)\n",
    "\n",
    "# Predictions\n",
    "y_pred = gb.predict(X_test)\n",
    "\n",
    "# Model Evaluation\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "recall = recall_score(y_test, y_pred)\n",
    "f1 = f1_score(y_test, y_pred)\n",
    "roc_auc = roc_auc_score(y_test, gb.predict_proba(X_test)[:, 1])\n",
    "\n",
    "# Save the model after training\n",
    "with open('credit_risk_gb_model.pkl', 'wb') as f:\n",
    "    pickle.dump(gb, f)\n",
    "\n",
    "# Confusion Matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Defaulted', 'Defaulted'], yticklabels=['Not Defaulted', 'Defaulted'])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('Confusion Matrix GB')\n",
    "plt.show()\n",
    "\n",
    "# Streamlit UI\n",
    "st.title(\"Credit Risk Prediction with Gradient Boosting\")\n",
    "income = st.number_input(\"Income\", min_value=0)\n",
    "loan_amount = st.number_input(\"Loan Amount\", min_value=0)\n",
    "credit_score = st.number_input(\"Credit Score\", min_value=0)\n",
    "debt_to_income = st.number_input(\"Debt to Income Ratio\", min_value=0.0)\n",
    "marital_status = st.selectbox(\"Marital Status\", [\"Single\", \"Married\", \"Divorced\", \"Other\"])\n",
    "gender = st.selectbox(\"Gender\", [\"Female\", \"Male\", \"Other\"])\n",
    "\n",
    "# Load the trained Gradient Boosting model\n",
    "with open('credit_risk_gb_model.pkl', 'rb') as f:\n",
    "    model = pickle.load(f)\n",
    "\n",
    "# Prediction function\n",
    "def predict_risk(income, loan_amount, credit_score, marital_status, gender, debt_to_income):\n",
    "    features = np.array([[income, loan_amount, credit_score, marital_status, gender, debt_to_income]])\n",
    "    prediction = model.predict(features)\n",
    "    return prediction\n",
    "\n",
    "# Button for prediction\n",
    "if st.button(\"Predict\"):\n",
    "    result = predict_risk(income, loan_amount, credit_score, marital_status, gender, debt_to_income)\n",
    "    if result == 0:\n",
    "        st.write(\"The loan is likely to be approved (Non-default).\")\n",
    "    else:\n",
    "        st.write(\"The loan is likely to default.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11d7edfb-cd62-4b01-945f-905f5739f4b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "streamlit run app.py\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
